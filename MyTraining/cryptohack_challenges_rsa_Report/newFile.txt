#Starter

-Modular Exponentiation
	101 ^ 17 mod 22663 = 19906
	command: python3 -c "print(pow(101, 17, 22663))" --> 19906
	flag: 19906

-Public Keys
	"Encrypt" the number 1212 using the exponent e=65537 and the primes p=17 and q=23. What number do you get as the ciphertext? 
	command: python3 -c "print(pow(12, 65537, (17 * 23)))" --> 301
	flag: 301
	
-Euler's Totient
	Given N=p⋅q and two primes:

	p = 857504083339712752489993810777
	q = 1029224947942998075080348647219

	What is Euler's totient ϕ(N)?
	command: python3 -c "print((1029224947942998075080348647219-1)*(857504083339712752489993810777-1))"
	flag: 882564595536224140639625987657529300394956519977044270821168

-Private Keys
	code:

def Multiple_inverse_using_extended_euclidean_algorithm():
    a = int(input(f"{GREEN}Enter number: "))
    b = int(input(f"{GREEN}Enter mod number: "))
    
    # Ensure a > b
    if a < b:
        a, b = b, a

    mod = a

    # Initialize variables
    T1, T2 = 0, 1
    steps = []  # To store intermediate steps

    while b != 0:
        Q = a // b  # Quotient
        R = a % b   # Remainder
        T = T1 - T2 * Q  # T value

        # Store the current step
        steps.append((Q, a, b, R, T1, T2, T))

        # Update variables for the next iteration
        a, b = b, R
        T1, T2 = T2, T

    # Add the final step when b = 0
    steps.append(("X", a, b, "X", T1, T2, "X"))

    # Print the table header
    print(f"{RESET}{CYAN}   Q  |   A   |   B   |   R   |  T1   |  T2   |   T ")
    print(             f"------+-------+-------+-------+-------+-------+-------")
    
    for step in steps:
        Q, A, B, R, T1_val, T2_val, T_val = step
        print(f"{Q:>5} | {A:>5} | {B:>5} | {R:>5} | {T1_val:>5} | {T2_val:>5} | {T_val:>5}")

    # Check if the inverse exists
    if a == 1:
        inverse = T1 % mod
        print(f"\n{RESET}{YELLOW}The multiplicative inverse of {steps[0][2]} modulo {steps[0][1]} is: {YELLOW}{inverse}")
    else:
        print(f"\n{RED}No inverse exists (gcd(a, b) != 1).")
	
	result:

   Q  |   A   |   B   |   R   |  T1   |  T2   |   T 
------+-------+-------+-------+-------+-------+-------
13466661512370479891353372715527553906876367852923451955 | 882564595536224140639625987657529300394956519977044270821168 | 65537 | 46333 |     0 |     1 | -13466661512370479891353372715527553906876367852923451955

    1 | 65537 | 46333 | 19204 |     1 | -13466661512370479891353372715527553906876367852923451955 | 13466661512370479891353372715527553906876367852923451956

    2 | 46333 | 19204 |  7925 | -13466661512370479891353372715527553906876367852923451955 | 13466661512370479891353372715527553906876367852923451956 | -40399984537111439674060118146582661720629103558770355867

    2 | 19204 |  7925 |  3354 | 13466661512370479891353372715527553906876367852923451956 | -40399984537111439674060118146582661720629103558770355867 | 94266630586593359239473609008692877348134574970464163690

    2 |  7925 |  3354 |  1217 | -40399984537111439674060118146582661720629103558770355867 | 94266630586593359239473609008692877348134574970464163690 | -228933245710298158153007336163968416416898253499698683247

    2 |  3354 |  1217 |   920 | 94266630586593359239473609008692877348134574970464163690 | -228933245710298158153007336163968416416898253499698683247 | 552133122007189675545488281336629710181931081969861530184

    1 |  1217 |   920 |   297 | -228933245710298158153007336163968416416898253499698683247 | 552133122007189675545488281336629710181931081969861530184 | -781066367717487833698495617500598126598829335469560213431

    3 |   920 |   297 |    29 | 552133122007189675545488281336629710181931081969861530184 | -781066367717487833698495617500598126598829335469560213431 | 2895332225159653176640975133838424089978419088378542170477

   10 |   297 |    29 |     7 | -781066367717487833698495617500598126598829335469560213431 | 2895332225159653176640975133838424089978419088378542170477 | -29734388619314019600108246955884839026383020219254981918201

    4 |    29 |     7 |     1 | 2895332225159653176640975133838424089978419088378542170477 | -29734388619314019600108246955884839026383020219254981918201 | 121832886702415731577073962957377780195510499965398469843281

    7 |     7 |     1 |     0 | -29734388619314019600108246955884839026383020219254981918201 | 121832886702415731577073962957377780195510499965398469843281 | -882564595536224140639625987657529300394956519977044270821168

    X |     1 |     0 |     X | 121832886702415731577073962957377780195510499965398469843281 | -882564595536224140639625987657529300394956519977044270821168 |     X

The multiplicative inverse of 65537 modulo 882564595536224140639625987657529300394956519977044270821168 is: 121832886702415731577073962957377780195510499965398469843281

	flag: 121832886702415731577073962957377780195510499965398469843281
	
-RSA Decryption
	N = 882564595536224140639625987659416029426239230804614613279163
	e = 65537
	c = 77578995801157823671636298847186723593814843845525223303932 
	
	Use this to factorize https://factordb.com/index.php?query=882564595536224140639625987659416029426239230804614613279163
	
	p = 857504083339712752489993810777
	q = 1029224947942998075080348647219
	
	command: python3 -c "print((1029224947942998075080348647219-1)*(857504083339712752489993810777-1))" --> 882564595536224140639625987657529300394956519977044270821168
	command: Multiple_inverse_using_extended_euclidean_algorithm(65537, 882564595536224140639625987657529300394956519977044270821168) --> 121832886702415731577073962957377780195510499965398469843281
	command: python3 -c "print(pow(77578995801157823671636298847186723593814843845525223303932, 121832886702415731577073962957377780195510499965398469843281, 882564595536224140639625987659416029426239230804614613279163))" --> 13371337
	flag: 13371337
	
-RSA Signatures
	Sign the flag crypto{Immut4ble_m3ssag1ng} using your private key and the SHA256 hash function.
	Challenge files:
		- private.key
		file content:
			N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
			d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
			
	code to solve:
		import hashlib
                from Crypto.Util.number import bytes_to_long

                def sha256_to_long(text):

                    sha256_hash = hashlib.sha256(text.encode()).digest()
                    

                    long_value = bytes_to_long(sha256_hash)
                    
                    return long_value

                N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
                d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
                text = "crypto{Immut4ble_m3ssag1ng}"
                result = sha256_to_long(text)
                print(f"number: {pow(result, d, N)}")
                
                flag: 13480738404590090803339831649238454376183189744970683129909766078877706583282422686710545217275797376709672358894231550335007974983458408620258478729775647818876610072903021235573923300070103666940534047644900475773318682585772698155617451477448441198150710420818995347235921111812068656782998168064960965451719491072569057636701190429760047193261886092862024118487826452766513533860734724124228305158914225250488399673645732882077575252662461860972889771112594906884441454355959482925283992539925713424132009768721389828848907099772040836383856524605008942907083490383109757406940540866978237471686296661685839083475
          
#Primes Part 1
-Factoring

    Just use https://factordb.com/index.php?query=510143758735509025530880200653196460532653147

    You will get these two numbers:

    19704762736204164635843 , 25889363174021185185929

    flag: 19704762736204164635843

