#Starter

-Modular Exponentiation
	101 ^ 17 mod 22663 = 19906
	command: python3 -c "print(pow(101, 17, 22663))" --> 19906
	flag: 19906

-Public Keys
	"Encrypt" the number 1212 using the exponent e=65537 and the primes p=17 and q=23. What number do you get as the ciphertext? 
	command: python3 -c "print(pow(12, 65537, (17 * 23)))" --> 301
	flag: 301
	
-Euler's Totient
	Given N=p⋅q and two primes:

	p = 857504083339712752489993810777
	q = 1029224947942998075080348647219

	What is Euler's totient ϕ(N)?
	command: python3 -c "print((1029224947942998075080348647219-1)*(857504083339712752489993810777-1))"
	flag: 882564595536224140639625987657529300394956519977044270821168

-Private Keys
	code:

def Multiple_inverse_using_extended_euclidean_algorithm():
    a = int(input(f"{GREEN}Enter number: "))
    b = int(input(f"{GREEN}Enter mod number: "))
    
    # Ensure a > b
    if a < b:
        a, b = b, a

    mod = a

    # Initialize variables
    T1, T2 = 0, 1
    steps = []  # To store intermediate steps

    while b != 0:
        Q = a // b  # Quotient
        R = a % b   # Remainder
        T = T1 - T2 * Q  # T value

        # Store the current step
        steps.append((Q, a, b, R, T1, T2, T))

        # Update variables for the next iteration
        a, b = b, R
        T1, T2 = T2, T

    # Add the final step when b = 0
    steps.append(("X", a, b, "X", T1, T2, "X"))

    # Print the table header
    print(f"{RESET}{CYAN}   Q  |   A   |   B   |   R   |  T1   |  T2   |   T ")
    print(             f"------+-------+-------+-------+-------+-------+-------")
    
    for step in steps:
        Q, A, B, R, T1_val, T2_val, T_val = step
        print(f"{Q:>5} | {A:>5} | {B:>5} | {R:>5} | {T1_val:>5} | {T2_val:>5} | {T_val:>5}")

    # Check if the inverse exists
    if a == 1:
        inverse = T1 % mod
        print(f"\n{RESET}{YELLOW}The multiplicative inverse of {steps[0][2]} modulo {steps[0][1]} is: {YELLOW}{inverse}")
    else:
        print(f"\n{RED}No inverse exists (gcd(a, b) != 1).")
	
	result:

   Q  |   A   |   B   |   R   |  T1   |  T2   |   T 
------+-------+-------+-------+-------+-------+-------
13466661512370479891353372715527553906876367852923451955 | 882564595536224140639625987657529300394956519977044270821168 | 65537 | 46333 |     0 |     1 | -13466661512370479891353372715527553906876367852923451955

    1 | 65537 | 46333 | 19204 |     1 | -13466661512370479891353372715527553906876367852923451955 | 13466661512370479891353372715527553906876367852923451956

    2 | 46333 | 19204 |  7925 | -13466661512370479891353372715527553906876367852923451955 | 13466661512370479891353372715527553906876367852923451956 | -40399984537111439674060118146582661720629103558770355867

    2 | 19204 |  7925 |  3354 | 13466661512370479891353372715527553906876367852923451956 | -40399984537111439674060118146582661720629103558770355867 | 94266630586593359239473609008692877348134574970464163690

    2 |  7925 |  3354 |  1217 | -40399984537111439674060118146582661720629103558770355867 | 94266630586593359239473609008692877348134574970464163690 | -228933245710298158153007336163968416416898253499698683247

    2 |  3354 |  1217 |   920 | 94266630586593359239473609008692877348134574970464163690 | -228933245710298158153007336163968416416898253499698683247 | 552133122007189675545488281336629710181931081969861530184

    1 |  1217 |   920 |   297 | -228933245710298158153007336163968416416898253499698683247 | 552133122007189675545488281336629710181931081969861530184 | -781066367717487833698495617500598126598829335469560213431

    3 |   920 |   297 |    29 | 552133122007189675545488281336629710181931081969861530184 | -781066367717487833698495617500598126598829335469560213431 | 2895332225159653176640975133838424089978419088378542170477

   10 |   297 |    29 |     7 | -781066367717487833698495617500598126598829335469560213431 | 2895332225159653176640975133838424089978419088378542170477 | -29734388619314019600108246955884839026383020219254981918201

    4 |    29 |     7 |     1 | 2895332225159653176640975133838424089978419088378542170477 | -29734388619314019600108246955884839026383020219254981918201 | 121832886702415731577073962957377780195510499965398469843281

    7 |     7 |     1 |     0 | -29734388619314019600108246955884839026383020219254981918201 | 121832886702415731577073962957377780195510499965398469843281 | -882564595536224140639625987657529300394956519977044270821168

    X |     1 |     0 |     X | 121832886702415731577073962957377780195510499965398469843281 | -882564595536224140639625987657529300394956519977044270821168 |     X

The multiplicative inverse of 65537 modulo 882564595536224140639625987657529300394956519977044270821168 is: 121832886702415731577073962957377780195510499965398469843281

	flag: 121832886702415731577073962957377780195510499965398469843281
	
-RSA Decryption
	N = 882564595536224140639625987659416029426239230804614613279163
	e = 65537
	c = 77578995801157823671636298847186723593814843845525223303932 
	
	Use this to factorize https://factordb.com/index.php?query=882564595536224140639625987659416029426239230804614613279163
	
	p = 857504083339712752489993810777
	q = 1029224947942998075080348647219
	
	command: python3 -c "print((1029224947942998075080348647219-1)*(857504083339712752489993810777-1))" --> 882564595536224140639625987657529300394956519977044270821168
	command: Multiple_inverse_using_extended_euclidean_algorithm(65537, 882564595536224140639625987657529300394956519977044270821168) --> 121832886702415731577073962957377780195510499965398469843281
	command: python3 -c "print(pow(77578995801157823671636298847186723593814843845525223303932, 121832886702415731577073962957377780195510499965398469843281, 882564595536224140639625987659416029426239230804614613279163))" --> 13371337
	flag: 13371337
	
-RSA Signatures
	Sign the flag crypto{Immut4ble_m3ssag1ng} using your private key and the SHA256 hash function.
	Challenge files:
		- private.key
		file content:
			N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
			d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
			
	code to solve:
		import hashlib
                from Crypto.Util.number import bytes_to_long

                def sha256_to_long(text):

                    sha256_hash = hashlib.sha256(text.encode()).digest()
                    

                    long_value = bytes_to_long(sha256_hash)
                    
                    return long_value

                N = 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803
                d = 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689
                text = "crypto{Immut4ble_m3ssag1ng}"
                result = sha256_to_long(text)
                print(f"number: {pow(result, d, N)}")
                
	flag: 13480738404590090803339831649238454376183189744970683129909766078877706583282422686710545217275797376709672358894231550335007974983458408620258478729775647818876610072903021235573923300070103666940534047644900475773318682585772698155617451477448441198150710420818995347235921111812068656782998168064960965451719491072569057636701190429760047193261886092862024118487826452766513533860734724124228305158914225250488399673645732882077575252662461860972889771112594906884441454355959482925283992539925713424132009768721389828848907099772040836383856524605008942907083490383109757406940540866978237471686296661685839083475
          
#Primes Part 1
-Factoring

    Just use https://factordb.com/index.php?query=510143758735509025530880200653196460532653147

    You will get these two numbers:

    19704762736204164635843 , 25889363174021185185929

    flag: 19704762736204164635843

-Inferius Prime
	file content:
		n = 984994081290620368062168960884976209711107645166770780785733
		e = 65537
		ct = 948553474947320504624302879933619818331484350431616834086273
	using this site "https://www.dcode.fr/chiffre-rsa" with argument in file get flag
	flag: crypto{N33d_b1g_pR1m35}

-Monoprime
	file content:
		n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591                                                                  
		e = 65537
		ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942 

	code to solve:
		from Crypto.Util.number import inverse, long_to_bytes
		
		n = 171731371218065444125482536302245915415603318380280392385291836472299752747934607246477508507827284075763910264995326010251268493630501989810855418416643352631102434317900028697993224868629935657273062472544675693365930943308086634291936846505861203914449338007760990051788980485462592823446469606824421932591
		e = 65537
		ct = 161367550346730604451454756189028938964941280347662098798775466019463375610700074840105776873791605070092554650190486030367121011578171525759600774739890458414593857709994072516290998135846956596662071379067305011746842247628316996977338024343628757374524136260758515864509435302781735938531030576289086798942
		
		# Since n is prime
		phi = n - 1
		
		# Private key account
		
		d = inverse(e, phi)
		
		# Decryption
		pt = pow(ct, d, n)
		decrypted = long_to_bytes(pt)
		
		print(decrypted)

	flag: crypto{0n3_pr1m3_41n7_pr1m3_l0l}

-Square Eyes
	hint:  It was taking forever to get a 2048 bit prime, so I just generated one and used it twice.

	code:
		n = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
		e = 65537
		ct = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896
		
		from Crypto.Util.number import long_to_bytes
		from gmpy2 import isqrt
		
		p = isqrt(n)
		phi = p * (p - 1)
		d = pow(e, -1, phi)
		pt = pow(ct, d, n)
		print(long_to_bytes(pt))
	flag: crypto{squar3_r00t_i5_f4st3r_th4n_f4ct0r1ng!}

-Manyprime
	code:
		from Crypto.Util.number import inverse, long_to_bytes
		import requests
		
		def get_factors_from_factordb(n):
		    url = f"http://factordb.com/api?query={n}"
		    try:
		        response = requests.get(url, timeout=60)
		        data = response.json()
		        if data['status'] == "FF":
		            factors = {}
		            for factor in data['factors']:
		                p, exp = factor
		                factors[int(p)] = int(exp)
		            return factors
		        else:
		            return None
		    except:
		        return None
		
		n = 580642391898843192929563856870897799650883152718761762932292482252152591279871421569162037190419036435041797739880389529593674485555792234900969402019055601781662044515999210032698275981631376651117318677368742867687180140048715627160641771118040372573575479330830092989800730105573700557717146251860588802509310534792310748898504394966263819959963273509119791037525504422606634640173277598774814099540555569257179715908642917355365791447508751401889724095964924513196281345665480688029639999472649549163147599540142367575413885729653166517595719991872223011969856259344396899748662101941230745601719730556631637
		e = 65537
		ct = 320721490534624434149993723527322977960556510750628354856260732098109692581338409999983376131354918370047625150454728718467998870322344980985635149656977787964380651868131740312053755501594999166365821315043312308622388016666802478485476059625888033017198083472976011719998333985531756978678758897472845358167730221506573817798467100023754709109274265835201757369829744113233607359526441007577850111228850004361838028842815813724076511058179239339760639518034583306154826603816927757236549096339501503316601078891287408682099750164720032975016814187899399273719181407940397071512493967454225665490162619270814464
		
		print("FactorDB is being verified...")
		factors = get_factors_from_factordb(n)
		
		if factors:
		    print("Factors from FactorDB:", factors)
		    
		
		    phi = 1
		    for p, exp in factors.items():
		        phi *= (p**exp - p**(exp-1))
		    
		
		    d = inverse(e, phi)
		    
		
		    pt = pow(ct, d, n)
		    decrypted = long_to_bytes(pt)
		    print("Original text:", decrypted)
		else:
		    print("No complete analysis found in FactorDB. Try other solutions.")

	flag: crypto{700_m4ny_5m4ll_f4c70r5}

#Public exponent
-Salty
	n = 110581795715958566206600392161360212579669637391437097703685154237017351570464767725324182051199901920318211290404777259728923614917211291562555864753005179326101890427669819834642007924406862482343614488768256951616086287044725034412802176312273081322195866046098595306261781788276570920467840172004530873767                                                                  
	e = 1
	ct = 44981230718212183604274785925793145442655465025264554046028251311164494127485
	
	# solution 
	from Crypto.Util.number import long_to_bytes
	print(long_to_bytes(ct))

	flag: crypto{saltstack_fell_for_this!}
