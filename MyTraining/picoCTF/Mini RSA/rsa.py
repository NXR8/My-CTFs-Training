from Crypto.Util.number import long_to_bytes

def find_invpow(x, n):
    """Find integer nth root of x using binary search.
    
    Args:
        x: The number to find the root of
        n: The degree of the root (e.g., 3 for cube root)
    
    Returns:
        The integer nth root of x
    """
    # Find upper bound for binary search
    high = 1
    while high ** n < x:
        high *= 2
    
    # Set lower bound to half of upper bound
    low = high // 2

    # Binary search to find the nth root
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1


# RSA parameters (modulus, public exponent, ciphertext)
N = 1615765684321463054078226051959887884233678317734892901740763321135213636796075462401950274602405095138589898087428337758445013281488966866073355710771864671726991918706558071231266976427184673800225254531695928541272546385146495736420261815693810544589811104967829354461491178200126099661909654163542661541699404839644035177445092988952614918424317082380174383819025585076206641993479326576180793544321194357018916215113009742654408597083724508169216182008449693917227497813165444372201517541788989925461711067825681947947471001390843774746442699739386923285801022685451221261010798837646928092277556198145662924691803032880040492762442561497760689933601781401617086600593482127465655390841361154025890679757514060456103104199255917164678161972735858939464790960448345988941481499050248673128656508055285037090026439683847266536283160142071643015434813473463469733112182328678706702116054036618277506997666534567846763938692335069955755244438415377933440029498378955355877502743215305768814857864433151287
e = 3  # Small public exponent (makes RSA vulnerable to cube root attack)
c = 1220012318588871886132524757898884422174534558055593713309088304910273991073554732659977133980685370899257850121970812405700793710546674062154237544840177616746805668666317481140872605653768484867292138139949076102907399831998827567645230986345455915692863094364797526497302082734955903755050638155202890599808154521995312832362835648711819155169679435239286935784452613518014043549023137530689967601174246864606495200453313556091158637122956278811935858649498244722557014003601909465057421728834883411992999408157828996722087360414577252630186866387785481057649036414986099181831292644783916873710123009473008639825720434282893177856511819939659625989092206115515005188455003918918879483234969164887705505900695379846159901322053253156096586139847768297521166448931631916220211254417971683366167719596219422776768895460908015773369743067718890024592505393221967098308653507944367482969331133726958321767736855857529350486000867434567743580745186277999637935034821461543527421831665171525793988229518569050


# Brute-force search for the plaintext message
i = 0
while True:
    # Try to find the cube root of (i*N + c)
    m_candidate = find_invpow(i*N + c, e)
    
    # Convert the candidate message to bytes
    flag_candidate = long_to_bytes(m_candidate)
    
    # Check if this looks like the flag (contains 'pico')
    if b'pico' in flag_candidate:
        # Clean up the flag string and print it
        flag = str(flag_candidate)[2:-1].lstrip(" ")
        print(f"Found the flag with i = {i}:")
        print(flag)
        break
    i+=1

